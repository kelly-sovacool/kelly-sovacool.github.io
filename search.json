[
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Kelly L. Sovacool",
    "section": "",
    "text": "Contact:    sovacool [at] umich.edu\nView a PDF version of my CV:    https://sovacool.dev/latex-cv/vitae_KLS.pdf"
  },
  {
    "objectID": "cv/index.html#skills",
    "href": "cv/index.html#skills",
    "title": "Kelly L. Sovacool",
    "section": "Skills",
    "text": "Skills\n\n\n\n\n\n\n\nProgramming Languages & Tools\n\n\n\nR\n\n\nPython\n\n\nC++\n\n\nBash\n\n\nNextflow\n\n\nSnakemake\n\n\ngit\n\n\nGitHub\n\n\nR Markdown\n\n\nJupyter\n\n\nQuarto\n\n\nLaTeX\n\n\nconda/mamba\n\n\nDocker\n\n\nSingularity\n\n\nSLURM\n\n\nUnix CLI\n\n\n\n\n\n\n\n\n\n\n\nSoftware Development\n\n\n\npackage maintenance\n\n\ntest-driven development\n\n\ncontinuous integration\n\n\ndocumentation\n\n\ncollaboration & peer review\n\n\nhigh performance computing\n\n\n\n\n\n\n\n\n\n\n\nResearch\n\n\n\nsupervised machine learning\n\n\ndata visualization\n\n\nreproducible manuscripts\n\n\ngut microbiome composition\n\n\namplicon sequence analysis\n\n\nmetagenomics\n\n\nbulk RNA-seq\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#education",
    "href": "cv/index.html#education",
    "title": "Kelly L. Sovacool",
    "section": "Education",
    "text": "Education\n\n\n\n\n\nDates\n\n\nDegree\n\n\nInstitution\n\n\n\n\n\n\n2018-2023\n\n\nPhD Bioinformatics\n\n\nUniversity of Michigan, Dept. of Computational Medicine and Bioinformatics  Advisor: Patrick D. Schloss\n\n\n\n\n2014-2018\n\n\nBS Biology\n\n\nUniversity of Kentucky, Dept. of Biology  Minor: Computer Science\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#research-experience",
    "href": "cv/index.html#research-experience",
    "title": "Kelly L. Sovacool",
    "section": "Research Experience",
    "text": "Research Experience\n\n\n\n\n\nDates\n\n\nTitle\n\n\nLab\n\n\nDescription\n\n\n\n\n\n\n2023-present\n\n\nBioinformatics Software Engineer II\n\n\nFrederick National Laboratory for Cancer Research\n\n\nDevelop and maintain open source bioinformatics workflows on the CCR Collaborative Bioinformatics Resource core team to support researchers at the National Cancer Institute. \n\n\n\n\n2019-2023\n\n\nGraduate Student Researcher\n\n\nSchloss Lab, Dept. of Microbiology and Immunology,  University of Michigan\n\n\nDeveloped, benchmarked, and maintained bioinformatics workflows and software packages in R & Python. Built machine learning pipelines for human gut microbiome classification problems in colorectal cancer and C. difficile infection. Published findings as reproducible papers in open access journals. Collaborated with other scientists on microbiome projects. Mentored junior lab members. \n\n\n\n\n2018-2019\n\n\nRotation Student Researcher\n\n\nProgram in Biomedical Sciences,  University of Michigan\n\n\nWorked in several different bioinformatics labs to find the best mentorship fit.\n\n\n\n\n2015-2018\n\n\nUndergraduate Lab Assistant\n\n\nMoseley Bioinformatics Lab, Dept. of Molecular and Cellular Biochemistry,  University of Kentucky\n\n\nDeveloped a Python package for comparative genomics. Identified sets of orthologous and paralogous gene products to facilitate collinearity analysis and detection of gene duplication events. \n\n\n\n\n2016-2018\n\n\nBIO395 Independent Research Student\n\n\nWeisrock Lab, Dept. of Biology,  University of Kentucky\n\n\nDeveloped bash scripts and a SNP calling pipeline in Snakemake. Population structure analysis of the Ambystoma tigrinum species complex. Bayesian species delimitation of the Desmognathus fuscus species complex. \n\n\n\n\n2015-2016\n\n\nUndergraduate Lab Assistant\n\n\nJaromczyk Lab, Dept. of Computer Science,  University of Kentucky\n\n\nMaintained the Epichloë festucae genome project database. Analyzed RNA-seq data of Chenopodium quinoa and coffee ringspot virus. \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#service",
    "href": "cv/index.html#service",
    "title": "Kelly L. Sovacool",
    "section": "Service",
    "text": "Service\n\n\n\n\n\nDates\n\n\nTitle\n\n\nOrganization\n\n\nDescription\n\n\n\n\n\n\n2025-present\n\n\nCo-Founder | Tech Lead\n\n\nYour Neighborhood Scientist\n\n\nYour Neighborhood Scientist cultivates community-based conversations around science, science policy, and scientists through a newsletter and blog. \n\n\n\n\n2019-2022\n\n\nExecutive Committee Member: Open Source Technical Lead\n\n\nGirls Who Code at U-M DCMB\n\n\nPlan, apply for funding, develop curriculum, and maintain resources to teach introductory Python programming & data science to young women+. Facilitate collaborative development and maintenance of our open source teaching resources. Organize our year-round Club and annual Data Science Summer Experience for high school women+. \n\n\n\n\n2019-2022\n\n\nOrganizer and Maintainer\n\n\nU-M Carpentries\n\n\nCo-lead development & maintenance of a curriculum for workshops teaching programming skills for reproducible research. Maintain the website, develop curriculum, and organize workshops. Collaborate with U-M Women in Science and Engineering to organize workshops for women+. \n\n\n\n\n2021-2023\n\n\nMentor\n\n\nSchloss Lab\n\n\nMentor an undergraduate student in building reproducible machine learning models to predict C. difficile infection severity from gut microbiome composition.\n\n\n\n\n2021-2022\n\n\nCoderSpaces co-host\n\n\nU-M ISR Data Science Hub\n\n\nHold office hours at a weekly virtual help session for data science practitioners\n\n\n\n\n2021-present\n\n\nPeer reviewer\n\n\n \n\n\nPLOS ONE (1), JOSS (2)\n\n\n\n\n2019-2021\n\n\nGraduate Student Coordinator\n\n\nU-M Data Analysis Networking Group\n\n\nOrganize monthly meetings & a one-day symposium for researchers to sharpen their data analysis skills. Apply for funding through a Rackham Interdisciplinary Workshop grant. \n\n\n\n\n2009-present\n\n\nVolunteer Sound Engineer\n\n\nvarious churches and non-profit organizations\n\n\nMix FOH, monitors, recording, and live stream.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#teaching",
    "href": "cv/index.html#teaching",
    "title": "Kelly L. Sovacool",
    "section": "Teaching",
    "text": "Teaching\n\n\n\n\n\nDate\n\n\nTitle\n\n\nOrganization\n\n\nwhere\n\n\nEvent(s)\n\n\n\n\n\n\n2025 Aug\n\n\nWorkshop Instructor\n\n\nNorwegian University of Science and Technology\n\n\nNTNU, Trondheim, Norway\n\n\nHealth AI in R Workshop\n\n\n\n\n2023 Jan-Apr\n\n\nGraduate Student Instructor\n\n\nU-M Dept. of Computational Medicine & Bioinformatics\n\n\nUniversity of Michigan, Ann Arbor, MI\n\n\nBIOINF 576: Tool Development for Bioinformatics. Develop curriculum and teach students the principles of software development in R & Python. Topics: software design, implementation, testing, documentation, issue tracking, peer review, and release. \n\n\n\n\n2022 Jun\n\n\nInstructor\n\n\n \n\n\nVirtual\n\n\nIntro to R & RNA-Seq Workshop for ASM Microbe conference attendees \n\n\n\n\n2019-2022\n\n\nFacilitator & Capstone Project Mentor\n\n\nGirls Who Code at U-M DCMB\n\n\nUniversity of Michigan, Ann Arbor, MI\n\n\nWeekly Club during the school year and week-long Summer Experience for high schoolers to learn Python for data science \n\n\n\n\n2018-2022\n\n\nWorkshop Instructor & Helper\n\n\nU-M Carpentries\n\n\nUniversity of Michigan, Ann Arbor, MI\n\n\n2-day Software Carpentry workshops teaching computational skills for reproducible research \n\n\n\n\n2019 Apr\n\n\nDNA Day Ambassador\n\n\nMichigan DNA Day\n\n\nPioneer High School, Ann Arbor, MI\n\n\nEpigenetics & Scientific Journeys \n\n\n\n\n2019 Mar\n\n\nWorkshop helper\n\n\nGraduate Society of Black Engineers and Scientists\n\n\nUniversity of Michigan, Ann Arbor, MI\n\n\nData Visualization with Python Workshop \n\n\n\n\n2019 Mar\n\n\nCapstone Activity Leader\n\n\nFemales Excelling More in Math, Engineering, & the Sciences\n\n\nUniversity of Michigan, Ann Arbor, MI\n\n\nBinary Numbers through Ozobots with GWC at U-M DCMB \n\n\n\n\n2012-2018\n\n\nTutor\n\n\nfreelance\n\n\n \n\n\nfor high school and college students in Biology, Calculus, Chemistry, Computer Science, and Bioinformatics. \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#publications",
    "href": "cv/index.html#publications",
    "title": "Kelly L. Sovacool",
    "section": "Publications",
    "text": "Publications\n\n\n\n\n\nLast updated: August 20, 2025\n* Indicates co-first author.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nArticle\n\n\nAuthors\n\n\nbadges\n\n\n\n\n\n\n2023 Aug\n\n\nMachine Learning Classification by Fitting Amplicon Sequences to Existing OTUs. mSphere\n\n\nArmour CR, Sovacool KL, Close WL, Topçuoğlu BD, Wiens J, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2022 Jul\n\n\nIntestinal Inflammation Reversibly Alters the Microbiota to Drive Susceptibility to Clostridioides Difficile Colonization in a Mouse Model of Colitis. mBio\n\n\nBarron MR, Sovacool KL, Abernathy-Close L, Vendrov KC, Standke AK, Bergin IL, Schloss PD, Young VB\n\n\n  \n\n\n\n\n\n\n\n\n2022 Feb\n\n\nOptiFit: An Improved Method for Fitting Amplicon Sequences to Existing OTUs. mSphere\n\n\nSovacool KL, Westcott SL, Mumphrey MB, Dotson GA, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2022 Jan\n\n\nDeveloping and Deploying an Integrated Workshop Curriculum Teaching Computational Skills for Reproducible Research. JOSE\n\n\n*Lapp Z, *Sovacool KL, Lesniak N, King D, Barnier C, Flickinger M, Krüger J, Armour CR, Lapp MM, Tallant J, Diao R, Oneka M, Tomkovich S, Anderson JM, Lucas SK, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2021 Dec\n\n\nTeaching Python for Data Science: Collaborative Development of a Modular & Interactive Curriculum. JOSE\n\n\n*Duda M, *Sovacool KL, Farzaneh N, Nguyen VK, Haynes SE, Falk H, Furman KL, Walker LA, Diao R, Oneka M, Drotos AC, Woloshin A, Dotson GA, Kriebel A, Meng L, Thiede SN, Lapp Z, Wolford BN\n\n\n  \n\n\n\n\n\n\n\n\n2021 May\n\n\nMikropml: User-Friendly R Package for Supervised Machine Learning Pipelines. JOSS\n\n\n*Topçuoğlu BD, *Lapp Z, *Sovacool KL, Snitkin E, Wiens J, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2021 Apr\n\n\nGeography Is More Important than Life History in the Recent Diversification of the Tiger Salamander Complex. PNAS\n\n\nEverson KM, Gray LN, Jones AG, Lawrence NM, Foley ME, Sovacool KL, Kratovil JD, Hotaling S, Hime PM, Storfer A, Parra-Olea G, Percino-Daniel R, Aguilar-Miguel X, O’Neill EM, Zambrano L, Shaffer HB, Weisrock DW\n\n\n  \n\n\n\n\n\n\n\n\n2020 Aug\n\n\nTen Simple Rules to Increase Computational Skills among Biologists with Code Clubs. PLoS Comput Biol\n\n\nHagan AK, Lesniak NA, Balunas MJ, Bishop L, Close WL, Doherty MD, Elmore AG, Flynn KJ, Hannigan GD, Koumpouras CC, Jenior ML, Kozik AJ, McBride K, Rifkin SB, Stough J, Sovacool KL, Sze MA, Tomkovich S, Topcuoglu BD, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2016 Aug\n\n\nProcessing RNA-Seq Data of Plants Infected with Coffee Ringspot Virus. BMC Bioinform\n\n\nGoodin MM, Farman M, Inocencio H, Jang C, Jaromczyk JW, Moore N, Sovacool KL\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\nN = 9"
  },
  {
    "objectID": "cv/index.html#presentations",
    "href": "cv/index.html#presentations",
    "title": "Kelly L. Sovacool",
    "section": "Presentations",
    "text": "Presentations\n\nTalks\n\n\n\n\n\nDate\n\n\nTitle\n\n\nEvent\n\n\nLocation\n\n\n\n\n\n\nAug 2025\n\n\nTips & Tricks for Reproducible R Projects\n\n\nR Ladies Trondheim\n\n\nTrondheim, Norway\n\n\n\n\nFeb 2025\n\n\nIntroduction to GitHub Actions for Analysts & Engineers\n\n\nBTEP Coding Club\n\n\nNCI CCR Bioinformatics Training & Education Program (virtual)\n\n\n\n\nApr 2024\n\n\nOrganizing and documenting NGS pipelines on GitHub\n\n\nABCS Programmer’s Corner\n\n\nNCI at Frederick (virtual)\n\n\n\n\nJun 2023\n\n\nImproving Machine Learning Models for Microbiome Analysis and Democratizing Data Science Along the Way\n\n\nPhD Defense\n\n\nUniversity of Michigan\n\n\n\n\nNov 2022\n\n\nPredicting C. difficile infection severity from the taxonomic composition of the gut microbiome\n\n\nBioinformatics Student Research Hour\n\n\nUniversity of Michigan\n\n\n\n\nFeb 2022\n\n\nIntro to git & GitHub\n\n\nSeminar for the KG Jebsen Center for Genetic Epidemiology\n\n\nNorwegian University of Science and Technology (Virtual)\n\n\n\n\nMar 2021\n\n\nOptiFit: a fast method for fitting amplicon sequences to existing OTUs\n\n\nBioinformatics Student Research Hour\n\n\nUniversity of Michigan (Virtual)\n\n\n\n\nApr 2018\n\n\nDeveloping a Global Homology Analysis for Comparative Genomics\n\n\nSystems Biology and Omics Integration Seminar\n\n\nUniversity of Kentucky\n\n\n\n\n\nNo matching items\n\n\n\n\nPosters\n\n\n\n\n\nDate\n\n\nTitle\n\n\nEvent\n\n\nLocation\n\n\n\n\n\n\nJun 2022\n\n\nPredicting the severity of C. difficile infections from the taxonomic composition of the gut microbiome\n\n\nASM Microbe\n\n\nWashington, DC\n\n\n\n\nJun 2020\n\n\nOptiFit: a fast method for fitting amplicon sequences to existing OTUs\n\n\nASM Microbe\n\n\nVirtual\n\n\n\n\nApr 2018\n\n\nDeveloping a Global Homology Analysis for Comparative Genomics\n\n\nShowcase for Undergraduate Scholars\n\n\nUniversity of Kentucky\n\n\n\n\nApr 2018\n\n\nDeveloping a Global Homology Analysis for Comparative Genomics\n\n\nNational Conference on Undergraduate Research\n\n\nUniversity of Central Oklahoma\n\n\n\n\nApr 2016\n\n\nProcessing RNA-seq Reads of Plants Infected with the Coffee Ringspot Virus\n\n\nShowcase for Undergraduate Scholars\n\n\nUniversity of Kentucky\n\n\n\n\nApr 2016\n\n\nProcessing RNA-seq Reads of Plants Infected with the Coffee Ringspot Virus\n\n\nUT-KBRIN Bioinformatics Summit\n\n\nCadiz, KY\n\n\n\n\nApr 2015\n\n\nThe Effect of Meditation on Performance\n\n\nShowcase for Undergraduate Scholars\n\n\nUniversity of Kentucky\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#awards",
    "href": "cv/index.html#awards",
    "title": "Kelly L. Sovacool",
    "section": "Awards",
    "text": "Awards\n\nGrants\n\n\n\n\n\nDates\n\n\nTitle\n\n\nInstitution\n\n\nAmount\n\n\n\n\n\n\n2022\n\n\nConference Travel Grant\n\n\nRackham Graduate School  University of Michigan\n\n\n$900\n\n\n\n\n2020-2021\n\n\nRackham Interdisciplinary Workshop Grant\n\n\nRackham Graduate School  University of Michigan\n\n\n$500\n\n\n\n\n2020\n\n\nConference Travel Grant\n\n\nRackham Graduate School  University of Michigan\n\n\n$800\n\n\n\n\n2019-2020\n\n\nRackham Interdisciplinary Workshop Grant\n\n\nRackham Graduate School  University of Michigan\n\n\n$500\n\n\n\n\n2019-2021\n\n\nNIH T32 Bioinformatics Training Program Fellow\n\n\nBioinformatics Graduate Program  University of Michigan\n\n\n \n\n\n\n\n2017\n\n\nOswald Research & Creativity Award  2nd place in Biological Sciences\n\n\nOffice of Undergraduate Research  University of Kentucky\n\n\n$200\n\n\n\n\n2017\n\n\nSummer Research Grant\n\n\nOffice of Undergraduate Research  University of Kentucky\n\n\n$2,000\n\n\n\n\n2014-2018\n\n\nPresidential Scholarship\n\n\nUniversity of Kentucky\n\n\nout-of-state full tuition\n\n\n\n\n\nNo matching items\n\n\n\n\nHonors\n\n\n\n\n\nDates\n\n\nTitle\n\n\nInstitution\n\n\n\n\n\n\n2018\n\n\nGraduated Cum Laude with Departmental Honors in Biology\n\n\nUniversity of Kentucky\n\n\n\n\n2018\n\n\nBiology Undergraduate Research Award Nominee\n\n\nUniversity of Kentucky\n\n\n\n\n2014-2018\n\n\nLewis Honors College\n\n\nUniversity of Kentucky\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#open-source-contributions",
    "href": "cv/index.html#open-source-contributions",
    "title": "Kelly L. Sovacool",
    "section": "Open Source Contributions",
    "text": "Open Source Contributions\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Categories\n        \n         \n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCCBR pipeliner\n\n\n\nsoftware\n\n\nnextfow\n\n\nsnakemake\n\n\ncancer research\n\n\n\nSuite of pipelines for multi-omics data analysis, purpose-built for NCI researchers\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmikropml\n\n\n\nsoftware\n\n\nmachine learning\n\n\nR\n\n\n\nUser-Friendly R Package for Supervised Machine Learning Pipelines\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nschtools\n\n\n\nsoftware\n\n\nmicrobiome\n\n\nR\n\n\n\nSchloss Lab tools for reproducible microbiome research\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmikropml snakemake workflow\n\n\n\nsoftware\n\n\nsnakemake\n\n\nmachine learning\n\n\nR\n\n\nPython\n\n\n\nSnakemake template for building reusable and scalable machine learning pipelines with mikropml\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmothur\n\n\n\nsoftware\n\n\nmicrobiome\n\n\nC++\n\n\n\nCommand-line tool for processing microbial amplicon sequence data\n\n\n\n\n\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmothur snakemake workflow\n\n\n\nsoftware\n\n\nmicrobiome\n\n\nsnakemake\n\n\nR\n\n\nPython\n\n\n\nSnakemake template for reproducible microbial amplicon sequence analysis with mothur\n\n\n\n\n\n\nCo-author\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU-M Software Carpentry\n\n\n\nCurriculum\n\n\nR\n\n\nUnix Shell\n\n\ngit\n\n\nWorkshop\n\n\n\nIntro to R, the Unix shell, and git for workshops on reproducible research.\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGirls Who Code at U-M DCMB\n\n\n\nCurriculum\n\n\nPython\n\n\nData Science\n\n\n\nIntro to Python for Data Science via Live-Coding for Girls Who Code clubs.\n\n\n\n\n\n\nCo-author and maintainer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Clubs\n\n\n\nCode Club\n\n\nTutorials\n\n\n\nShort coding tutorials for lab meetings\n\n\n\n\n\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU-M DANG!\n\n\n\nReproducibility\n\n\nTutorials\n\n\n\nrepro-packs: Organizing projects for reproducibility and headache prevention.\n\n\n\n\n\n\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to R & RNA-seq\n\n\n\nCurriculum\n\n\nR\n\n\nRNA-seq\n\n\nWorkshop\n\n\n\nWorkshop for 2022 ASM Microbe attendees\n\n\n\n\n\n\nContributor\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#continuing-education",
    "href": "cv/index.html#continuing-education",
    "title": "Kelly L. Sovacool",
    "section": "Continuing Education",
    "text": "Continuing Education\n\n\n\n\n\nDate\n\n\nTitle\n\n\nOrganization\n\n\nLocation\n\n\n\n\n\n\nJan 2020\n\n\nBuilding Tidy Tools workshop at rstudio::conf\n\n\nRstudio, PBC\n\n\nSan Francisco, CA\n\n\n\n\nDec 2019\n\n\nWinter School in Research Software Engineering\n\n\nUS Research Software Sustainability Institute\n\n\nSeattle, WA\n\n\n\n\nJun 2019\n\n\nSoftware Carpentry Instructor Training\n\n\nThe Carpentries\n\n\nUniversity of Michigan\n\n\n\n\nMay 2019\n\n\nPyCon Education Summit & Conference\n\n\nThe Python Software Foundation\n\n\nCleveland, OH\n\n\n\n\nApr 2019\n\n\nMICROBIOL 612.2\n\n\nRiffomonas Minimal R Workshop\n\n\nUniversity of Michigan\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/carpentries.html",
    "href": "cv/carpentries.html",
    "title": "U-M Carpentries",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          role\n        \n         \n          event\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nrole\n\n\nevent\n\n\n\n\n\n\nOct 2022\n\n\nInstructor\n\n\nWorkshop on R, the Unix Shell, & Git/GitHub\n\n\n\n\nFeb 2022\n\n\nHelper\n\n\nVirtual workshop organized by the U-M Bioinformatics core\n\n\n\n\nJan 2021\n\n\nLead instructor\n\n\nVirtual workshop sponsored by U-M WISE\n\n\n\n\nJan 2020\n\n\nLead instructor\n\n\nWorkshop sponsored by U-M WISE\n\n\n\n\nJul 2019\n\n\nInstructor\n\n\nWorkshop on R, the Unix Shell, & Git/GitHub\n\n\n\n\nMay 2019\n\n\nHelper\n\n\nWorkshop on R, the Unix Shell, & Git/GitHub\n\n\n\n\nMar 2019\n\n\nHelper\n\n\nWorkshop on Python, the Unix Shell, & Git/GitHub\n\n\n\n\nDec 2018\n\n\nHelper\n\n\nWorkshop on R, the Unix Shell, & Git/GitHub\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog Posts",
    "section": "",
    "text": "Name change\n\n\n\n\n\n⚭\n\n\n\n\n\nDec 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJust enough Python for Snakemake\n\n\n\n\n\n\nR\n\n\nPython\n\n\nSnakemake\n\n\ncode club\n\n\n\nA tutorial for R users who want to write advanced Snakemake workflows \n\n\n\n\n\nNov 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nBase R’s sort() order changes with locale\n\n\n\n\n\n\nSoftware Development\n\n\nR\n\n\nR Packages\n\n\n\nAnd that can cause frustrating test failures in devtools::check()! \n\n\n\n\n\nAug 26, 2021\n\n\n\n\n\n\n\n\n\n\n\n\nTeach yourself to Code\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\nLab work paused due to covid? You could learn how to code!\n\n\n\n\n\nMar 20, 2020\n\n\nKelly L. Sovacool, Zena M. Lapp\n\n\n\n\n\n\n\n\n\n\n\n\nURSSI Winter School\n\n\n\n\n\n\nResearch Software Engineering\n\n\nOpen Source Software\n\n\nReproducibility\n\n\nSoftware Development\n\n\nPython\n\n\ngit\n\n\n\nMy notes from the URSSI Winter School \n\n\n\n\n\nDec 19, 2019\n\n\n\n\n\n\n\n\n\n\n\n\nBioinformatics Resources\n\n\n\n\n\n\nBioinformatics\n\n\nSoftware Development\n\n\nData Analysis\n\n\nReproducibility\n\n\nPython\n\n\nR\n\n\ngit\n\n\n\nResources for Bioinformatics Software Development & Data Analysis \n\n\n\n\n\nMay 15, 2019\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kelly Sovacool",
    "section": "",
    "text": "Hi, I’m Kelly! I work remotely as a Bioinformatics Software Engineer for Frederick National Lab on the CCBR core team. I completed my PhD in Bioinformatics in Pat Schloss’ lab at the University of Michigan, where I developed bioinformatics tools and data analysis pipelines for microbial ecology and host-associated microbiome research. I’m a fan of open science, open source software, and reproducible research.\nWhen I’m not in the dry lab, you might find me running, cycling, climbing, or otherwise being active outside. I recently co-founded Your Neighborhood Scientist, a nonprofit organization dedicated to improving public understanding of science. While pursuing my PhD at UMich, I volunteered with Girls Who Code, taught Software Carpentry workshops, and hosted CoderSpaces office hours. I also moonlight as a live sound engineer from time to time."
  },
  {
    "objectID": "posts/2019-05-15-bioinf-resources/index.html",
    "href": "posts/2019-05-15-bioinf-resources/index.html",
    "title": "Bioinformatics Resources",
    "section": "",
    "text": "I found myself sending some of the same links over and over again to people who asked questions related to bioinformatics. So it was time to compile all the links in one convenient place!\nAll of the resources linked below are free unless otherwise noted. This isn’t intended to be an exhaustive list of all the resources available, just some of the ones I have come across and have found useful.\nLast updated: 2019-09-23"
  },
  {
    "objectID": "posts/2019-05-15-bioinf-resources/index.html#programming",
    "href": "posts/2019-05-15-bioinf-resources/index.html#programming",
    "title": "Bioinformatics Resources",
    "section": "Programming",
    "text": "Programming\n\nSoftware Carpentry: Intro lessons on the Unix shell, git, R, & Python.\nLangmead Lab teaching materials: cover classic bioinformatics algorithms.\nAdvent of Code: small programming puzzles.\nStepik Bioinformatics Contest.\n\n\nShell\n\nIntroduction to the Unix Shell - Software Carpentry\nExtra Unix Shell Material - Software Carpentry\nIntroduction to the Command Line for Genomics - Data Carpentry\nOh My ZSH!: framework for managing your zsh configuration. I switched from bash to zsh and haven’t looked back! (Why zsh is cooler than your shell)\n\n\n\nGit\n\nVersion Control with Git - Software Carpentry\ngit documentation\nLearn Git Branching: interactive git visualizer\nHow to Write a Git Commit Message - Chris Beams\nLink your university email to GitHub to get pro/education features.\n\nAll users (Pro or free) get free unlimited private repositories on GitHub.\n\nGitKraken has a nice GUI for interacting with git, GitHub, GitLab, etc. (Note that this is a referral link to be entered to win a Nintendo Switch.)\n\n\n\nPython\n\nSoftware Carpentry lesson\nProject Rosalind: learn Python & practice solving bioinformatics problems.\nGWC Code demos: introductory Python demos - Girls Who Code @ UM-DCMB\nGWC Challenge Questions: practice solving problems - Girls Who Code @ UM-DCMB\nPython For Everybody course on Coursera (free for UMich students) - Charles Severance\nObject-Oriented Programming (OOP) in Python tutorial - RealPython\nBooks:\n\nPython Data Science Handbook - Jake VanderPlas\nAutomate the Boring Stuff with Python - Al Sweigart\nThink Python: How to Think Like a Computer Scientist - Allen Downey\nDive Into Python 3 - Mark Pilgrim\nObject-Oriented Programming in Python - University of Cape Town\n\nVideos:\n\nOffice Hours for BIOINF 529: Bioinformatic Concepts & Algorithms - Marcus Sherman\nTransforming Code into Beautiful, Idiomatic Python - Raymond Hettinger\nBeyond PEP 8 – Best practices for beautiful intelligible code - Raymond Hettinger\n\n\n\n\nR\n\nSoftware Carpentry lesson\nRStudio’s interactive tutorials\nCheatsheets by RStudio\nRiffomonas minimalR: Intro to R tutorial with applications in microbiology - Pat Schloss\nWhat is the Tidyverse?\nGetting started with the Tidyverse\nBooks:\n\nR for Data Science - Hadley Wickham\nMastering Software Development in R - Roger Peng, Sean Kross, & Brooke Anderson\nAdvanced R - Hadley Wickham\nR Packages - Hadley Wickham\nWhat they forgot to teach you about R - Jenny Bryan & Jim Hester\nHappy Git and GitHub for the useR - Jenny Bryan & Jim Hester\nFundamentals of Data Visualization - Claus O. Wilke\nAn Introduction to Statistical Learning with Applications in R - Gareth James, Daniela Witten, Trevor Hastie, & Robert Tibshirani"
  },
  {
    "objectID": "posts/2019-05-15-bioinf-resources/index.html#reproducibility",
    "href": "posts/2019-05-15-bioinf-resources/index.html#reproducibility",
    "title": "Bioinformatics Resources",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nRiffomonas reproducible research tutorial - Pat Schloss\nSnakemake: Python-based workflow management system.\nconda: package, dependency, & environment manager.\n\ncheatsheet\nTutorial: conda on the cluster - Will Close\n\nHow to Name Files - Jenny Bryan\n\n\nProject organization\n\nNoble WS. A quick guide to organizing computational biology projects. 2009. PLOS Comput Biol. doi: 10.1371/journal.pcbi.1000424.\nScientific project template.\ncookiecutter project templating tool.\nHow to Name Files - Jenny Bryan\n\n\n\nLiterate programming\n\nR Markdown\n\nHow I use R Markdown to document my bioinformatics analyses - Rachael Lappan\nRMarkdown for writing reproducible scientific papers - Mike Frank & Chris Hartgerink\nR Markdown: The Definitive Guide - Yihui Xie, J. J. Allaire, Garrett Grolemund\nCommunicating with R Markdown\n\n\n\nJupyter\n\nJupyter Notebooks for Performing and Sharing Bioinformatics Analyses - Jonathan Dursi\nJupyterLab Documentation\nGoogle Colab - free Jupyter notebook environment in the cloud.\n\nWe use this for teaching Python for data science in our Girls Who Code club.\n\n\n\n\n\nDocumentation\n\nLee BD (2018) Ten simple rules for documenting scientific software. PLoS Comput Biol 14(12): e1006561. doi: 10.1371/journal.pcbi.1006561.\ndocopt: easily create & parse command-line interfaces. Available for Python, R, C++, & more.\nSphinx for creating documentation.\nRead the Docs for hosting documentation.\nWriting R package documentation.\npkgdown: build a website for your R package."
  },
  {
    "objectID": "posts/2019-05-15-bioinf-resources/index.html#editors",
    "href": "posts/2019-05-15-bioinf-resources/index.html#editors",
    "title": "Bioinformatics Resources",
    "section": "Editors",
    "text": "Editors\n\nAtom: text editor. Additional packages for atom:\n\nAutosave on change\nMarkdown Preview\nMarkdown TOC\nLanguage LaTeX\n\nPyCharm: IDE for Python.\n\nThe community edition is free, or link your university email to get the pro version for free.\nSupports Snakemake syntax highlighting & Jupyter notebooks.\n\nRStudio: IDE for R.\nKite: AI autocomplete for Python. Works in Atom, PyCharm, Vim, & more."
  },
  {
    "objectID": "posts/2019-05-15-bioinf-resources/index.html#misc.",
    "href": "posts/2019-05-15-bioinf-resources/index.html#misc.",
    "title": "Bioinformatics Resources",
    "section": "Misc.",
    "text": "Misc.\n\ncsvkit: command-line tool for working with and converting to CSV format from Excel, JSON, etc.\nHypothesis Python testing module."
  },
  {
    "objectID": "posts/2019-12-19-urssi-winterschool-notes/index.html",
    "href": "posts/2019-12-19-urssi-winterschool-notes/index.html",
    "title": "URSSI Winter School",
    "section": "",
    "text": "All slides & other resources are available on GitHub: si2-urssi/winterschool"
  },
  {
    "objectID": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-1",
    "href": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-1",
    "title": "URSSI Winter School",
    "section": "Day 1",
    "text": "Day 1\n\nIntro to Software Design (Jeffrey Carver)\n\nWhether you know it or not, you’re doing software design. Make those decisions with intent & purpose.\nCharacteristics of good design\n\nFirmness: hard to write bugs accidentally\nSuitable for intended purpose\nInteresting & useful to users\n\nPrinciples of design:\n\nTraceability - easy to understand what the software is supposed to do.\nMinimize intellectual distance - as close to the real-world as possible\nDon’t reinvent the wheel. Re-use good design if it’s already a solved problem.\nAccommodate change.\nFail gracefully.\n\n\n\n\nThink like a programmer (Andy Loftus)\n\nSolve easy problems; defer hard ones until they are easy.\n\nZen of Python (import this) excerpt: “If the implementation is hard to explain, it’s a bad idea. If the implementation is easy to explain, it may be a good idea.”\n\nThink about code before you write it\n\nIdentify use cases\nDefine goals from use cases\nSplit into small, easy pieces\nDefine one piece at a time\n\nThinking about use-cases before the goal helps you focus on the small, easy-to-solve pieces (exact problem at hand, limit the scope of the problem) without getting bogged down in any grandiose, big-picture ideas.\nEncapsulation\n\nIsolate unrelated concerns.\nHide changing things.\nPython details:\n\nUse the @property & @var.setter decorators for getters & setters.\n@classmethod decorator for different constructors & other methods that work on the class but not instances of the class.\n\n\nEnvironment variables\n\ncollections.ChainMap: use it to prioritize program options.\n\nos.environ to access shell environment variables.\nDefaults = some dict\ncombined = ChainMap(cmdline_args, os.environ, defaults)\n\nEquivalent of stringing together dictionary.update but in reverse\n\n\n\nStructuring code for readability: Trey Hunner blog post: craft your python like poetry.\nLow barrier to entry. Make your code usable & accessible to lots of people.\n\nMake a runnable sample\n\nKeep it short; one command if possible.\n\nslick example: curl URL/quickstart.sh | bash (see slides for contents of quickstart.sh)\n\nClean up after running\nRun it multiple times in a row & it does the exact same thing every time\n\n\n\n\n\nIntro to Design Patterns (Jeffrey Carver)\n\nChain of responsibility\n\nCommon interface to handle requests, but user doesn’t need to know which specific method handles the request.\n\nCreational pattern: Builder\n\nCreate various representations of the same object. Abstract construction steps with different implementations of methods for different object variants.\n\nStructural pattern: Proxy\n\nOnly load something when you actually need it if it takes a long time to load or is expensive to create. e.g. when loading webpage, it’ll display the text before images have finished loading, with blank placeholder where image will load.\n\nMore resources\n\n“Gang of four” original book on design patterns\ntoptal.com python design patterns book\n\n\n\n\nBasics of packaging Python programs (Kyle Niemeyer)\n\nModule: any python file that contains definitions & statements.\nPackage: a collection of modules in the same directory.\n\nMust contain the __init__.py file. (Except for namespace packages…)\n\nOften this file is empty.\nPython executes this file before anything else when imported.\n\nCan contain subdirectories with “submodules” containing more Python files and another __init__.py file.\nTests subdirectory for test files (more on pytest later).\n\nLots of different ways to import modules.\n\nKyle’s preferred way: explicit relative imports\n\nUses dot notation (. for current path, .. for one level up)\n\n\nDON’T REINVENT THE WHEEL\n\nRely on the standard library, numpy, scipy, etc.\n\nmain() & __main__ (Bryan Weber, writes for RealPython)\n\nCan use a module both as a module AND a script.\nmain() is the entry point to the program.\nImport guard example: realpython.com/python-main-function\n__main__.py: special use case to execute your package as a script. e.g. pip.\n\nPackage management\n\npip to install packages on PyPI or from source.\n\n-e flag for development version.\n\nThe setup.py file (at same level as source directory) tells pip how to install your package.\n\nSee slides for example use.\n\nSee Kyle’s “better example” slide for cool use of path.abspath & path.join with here variable (kinda like R’s here pkg)\nKeep a Changelog\nSemantic versioning (PEP 440)\n\nMAJOR.MINOR.PATCH\n\nProblem with setup.py: could have malicious code.\n\nPyPA has come up with pyproject.toml & flit to get around that. Also easier than using setup.py.\nAlso look into cookiecutter templates.\n\n\nThink about this at the very beginning so you don’t have to re-organize everything later."
  },
  {
    "objectID": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-2",
    "href": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-2",
    "title": "URSSI Winter School",
    "section": "Day 2",
    "text": "Day 2\n\nCollaboration with Git and GitHub (Karthik Ram)\n\nWorkflows\n\nCentralized workflow\n\nOnly works for really small projects\nEveryone just commits to master 😬\n\nFeature branching workflow\n\nAll work in a feature branch (not master).\nStart a pull request before merging to master.\nDelete branches after they’re merged.\n\nForking workflow\n\nOnly reason to fork is if you don’t have write access to someone else’s project / when you’re not a core contributor.\nCreate a PR when ready to merge.\n\n\nAlias git to hub\n\nExtensions to interface with GitHub from the command line.\nCreate a GitHub repo from a local git repo: git create username/reponame\nOpen up the repo in your browser: git browse\nOpen a new PR: git pull-request\nCompare 2 branches: git compare master..feature-branch\nIf you clone a repo but realize you wanted to fork it: git fork\n\nOn branches:\n\nA branch is just a pointer to a commit. Commits are linked nodes.\n\nUse pull requests as much as possible.\n\nFosters code review.\nFacilitates discussion.\nCan use continuous integration to run tests automatically.\nSomeone else should merge your code into master so two sets of eyeballs review each feature.\n\nPick one or two people to do a technical review & an end-user review.\n\nInstead of creating a merge commit, could use rebase to squash all the commits from that branch into one.\nNEVER SEND A PULL REQUEST FROM MASTER.\n\nMaster branches will become incompatible.\nGitHub now warns you if you attempt to do this.\n\nNever send a large pull request without notice.\n\nRead the contributing doc.\nCommon practice is to ask whether the maintainers want the feature before you work on it.\nPull requests should be small, digestible changes.\n\nMake each unit of code simple enough for someone to review & accept.\n\n\n\nTips:\n\nAlways git pull before you start new work.\nKeep branch names descriptive.\nGenerously use branches, but delete them when you’re done.\nUse the hub extension to make your life easier.\n\n\n\n\nGit Exercises (James Howison)\n\nGroup activity here.\nPull requests are communication; make them digestible.\nNote: any time you edit files, that’s a feature, so you should always do that in a branch.\nMaintainer as developer AND champion of the community.\n\nCreate a welcoming & active environment.\nHow long ago was the last commit is really important: is the project active?\n\n“Turn the music on — make it feel like a party!”\n\nEven when you’re working with people face-to-face, you should document discussions on GitHub.\n\nHow to split pull requests.\n\n\n\nWe’re learning so many useful tips & tricks for research software sustainability at #urssi_winterschool …and having fun along the way! pic.twitter.com/FMApXXj9wL\n\n— Kelly Sovacool (@kelly_sovacool) December 19, 2019\n\n\n\n\nSoftware Testing and Continuous Integration (Kyle Niemeyer)\n\nHow do you know your code gives the right answers? …what about after you make changes to the code?\nWhen: ALWAYS\nWhere: external test suite\n\ne.g. inside tests/ subdir in package repo.\nSome tests are better than no tests. But a rigorous test suite is best!\n\nWhy: make sure our results are trustworthy.\n\nIt’s really easy to make subtle mistakes.\nHelps us know that a PR won’t break anything.\nUnit tests are good examples of how a package works.\n\nWhat and how\n\nTests compare expected vs observed outputs for known inputs.\nYou don’t have to have a function written in order to write a test.\nUse assertions (e.g. assert exp == obs).\nUse math.isclose() or np.allclose() to get around floating point precision.\nUse pytest package.\n\n-s to keep standard output.\n-k to run tests matching a substring.\n-q run specific test file & test function.\n\n\nWhat cases to test\n\nInterior: precise values don’t matter (just test one of these).\nEdge: beginning or end of range of inputs (test all of these).\nCorner cases: 2 or more edge cases that intersect.\n\nPytest test generators\n\nDecorator to feed lots of inputs to one test function: @pytest.mark.parametrize\n\nTypes of tests\n\nUnit test: test individual functions & methods.\n\nHave to break up your code into small functions.\n\nIntegration test: verify that multiple pieces of the code work together.\nRegression test: confirm that new results match prior results (which are assumed correct).\n\nTest-driven development (TDD): write your tests before you implement the functions.\nMore tips\n\nTest for consistency with PEP8.\n\ne.g. flake8: linter & style-checker. black auto-formatter (not mentioned by Kyle).\nPlugins for your favorite IDE to run it continuously.\n\nTest that exceptions are raised: pytest.raises(ExceptionClass)\nMocking\n\nReplace parts of the system with precisely controllable code to specify return values & throw exceptions.\n\n\nTest coverage\n\nPercentage of code (in number of lines) that are touched by tests.\n100% test coverage doesn’t guarantee that you catch all potential errors; it means every line of code is run by at least one test.\npytest-cov creates a coverage report.\ncodecov.io integrates with GitHub.\n\nContinuous integration\n\nEnsure all changes to your project pass tests through automated test & build process.\nServices: GitHub Actions, travis, CircleCI, AppVeyor, Jenkins (not mentioned by Kyle but used by mothur)\nAdd the CI badge to your readme: it signals that your tool is being actively maintained.\nSee PyTeCK as an example of useful badges & tests in the wild.\n\n\n\n\nGit Exercises ctd (James Howison)\n\nThe “split a pull request” activity.\nLearnGitBranching visualizer.\nNote: git cherry-pick keeps the original author information. 😄\ngit rebase re-writes history to move the branch point. Obviates merge commits, instead makes them fast-forwards.\ngit rebase -i in interactive mode is a good idea. Allows you to squash commits and clean things up."
  },
  {
    "objectID": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-3",
    "href": "posts/2019-12-19-urssi-winterschool-notes/index.html#day-3",
    "title": "URSSI Winter School",
    "section": "Day 3",
    "text": "Day 3\n\nCode Review (Jeffrey Carver)\n\nCode review augments testing, but doesn’t replace testing.\n\nEfficiency, readability, etc. can’t be tested for.\n\nThe purpose is to make the code better. Everyone makes mistakes. There’s no expectation that you’ll do it exactly right the first time.\nBy doing code review, you save time down the road.\nGoals:\n\nTeam cohesion.\n\nGain shared understanding of the project.\nGet to know teammates skills’ better.\n\nCode quality.\n\nFind problems early.\nGet different perspectives.\nConsistency & readability.\nMakes code easier to maintain.\n\nPersonal learning.\n\nReading other people’s code & having your code reviewed.\n\n\nMindset:\n\nDeveloper:\n\nRecognize that a code critique is not a personal attack. You are not your code.\nBe ready & willing to learn new things.\nExpect that there will be changes. Remove the fear of making mistakes.\nBe humble.\n\nReviewer:\n\nDon’t assume that your way is the best.\nMake positive comments, not only negative ones.\nUnderstand why the developer asked you to review the code.\nFocus on the code, not on the author.\nPick your battles.\n\n\nTechniques\n\nPrioritize things that humans can spot that automated testing can’t.\n\nReadability\nAlgorithms\n\n\nHow we communicate matters (applies in all types of feedback-giving)\n\nAsk questions where possible.\n\ne.g. “Have you considered…” – Maybe they have and there’s a good reason for it.\n\nNo personal attacks. It’s about the code, not the person!\nBe as specific as possible about how the code could be improved instead of making general statements.\nPut yourself in others’ shoes.\n\nIf you wouldn’t want to get the comment, you probably shouldn’t give it to someone else.\n\nExplain why you’re making the suggestion.\n\nChecklist\n\nBefore you ask someone to review your code:\n\nWrite tests.\nMake sure the code runs & passes the tests.\nWrite comments & other documentation.\n\nDocument any weird edge cases & work-arounds\n\nFollow the style guide.\n\nWhen you review someone else’s code:\n\nComments are understandable & appropriate.\nDRY up repetitive code.\nCode runs & passes tests.\nExceptions are handled appropriately.\n\n\nBest practices\n\nCommunicate goals of code review.\nDo it early & often.\nReview a small amount of code.\n\nIf it takes longer than 60 minutes to review, that’s too much.\n\nEstablish a process for what to do after reviews.\n\nIs it a hard gate that you have to make the reviewer happy, or are they just suggestions you could choose not to follow?\n\n\nIssues you might identify in code review\n\nInconsistent style\nInefficiency\nUnvalidated inputs\nLack of exception handling\n\nWhy is code review important for research software specifically?\n\nJust like peer-reviewing publications, we want to make sure the code underlying the science is sound.\nScience depends on the correctness of your code.\nHelp spread best-practices & high-level understanding in the scientific community.\nResults may not always be known. There’s not always “ground truth” (e.g. in simulations).\n\nGitHub-specific tips: using Pull Requests for code review (examples: pr-omethe-us/PyKED & astropy) (Kyle Niemeyer)\n\nUse pull request templates.\n\nCould enforce check boxes like which issue(s) it resolves, that test cases were added, etc.\n\nEasily view file diffs & add comments right alongside the code. Facilitates conversation.\n\nYou can leave comments at multiple lines.\nMake suggestions for small, easy changes. There’s an “insert suggestion” button! (Don’t do this for design changes.)\n\nUnder settings &gt; branches, you can protect branches\n\ne.g. require that a PR has to be reviewed before merging into master.\nMore on code owners in github docs\n\nTool: octobox.io for managing GitHub notifications.\n\n\n\n\nOpen Science and Software Citation (Kyle Niemeyer)\n\nTLDR: if you make your code public, pick a license and put a LICENSE file in your repo.\nCopyright\n\nFacts & ideas are not copyrightable.\nExpressions of ideas are copyrightable.\nRight of first publication: goes to the first creator even if not explicitly specified.\nYou should include a license with all publicly available software code so people know how they can (or can’t) use it.\n\nOr, you can explicitly put work into the public domain, then it’s free for anyone & everyone to use & modify.\n\n\nSoftware Licenses\n\nTypes:\n\nProprietary\nFree/open source (FOSS, FLOSS, OSS)\n\nPermissive: BSD 3-clause, MIT\nCopyleft: GPL (the license is “viral”)\n\n\nPick an existing license; don’t make your own!\nchoosealicense.com\nOpen Source Initiative (OSI) Licenses\n\nTo call your work “open-source”, you have to release it under one of the OSI licenses.\n\n\nNon-software: Creative Commons\n\nCodes:\n\nBY: Attribution (similar to permissive)\nSA: ShareAlike (similar to copyleft)\nND: NoDerivatives\nNC: NonCommercial\n\ne.g. CC BY, CC BY-SA\nCC0: like the public domain version of creative commons.\n\nMore concepts\n\nPatents: cover ideas & concepts (which copyright doesn’t).\nTrademarks: symbols that represent a business or organization.\nExport control: gov’t may forbid transfer of code/data/ideas to another country or foreign national.\nHIPAA: cannot share human patient data.\n\nArchiving & Citing Software\n\nServices: Zenodo, figshare, something within your University’s library (UMich has one)\n\nArchives your stuff forever and makes it citable with a DOI.\nfigshare: company, for-profit…\nZenodo: run by CERN. Will be around as long as the EU exists.\n\nFree! Good file size limits.\nConnects with GitHub! When you turn on Zenodo for your repo, it creates a new DOI when you cut a new release.\n\n\nWithout proper citations, your work is not reproducible.\nAcademia relies on citations for credit.\nPaper: Software Citation Principles\n\nSoftware should be “first-class” citations just like other publications.\nHow? name, author(s), DOI or other persistent identifier.\n\nA GitHub link is not a persistent identifier, but it’s better than nothing.\n\nIf there’s a paper describing it, cite both the paper & the code DOI.\n\nHow can we make our software easily citable?\n\nCreate a DOI (e.g. via Zenodo)\nInclude a CITATION file in your GitHub repo.\n\nTool in development: cite as (James Howison)\n\nWeb scraper to find the right citation given a package name or website.\n\n\n\n\n\nReproducibility\n\nrepro-packs (Kyle Niemeyer)\n\nLorena Barbra: “reproducibility packages (repro-pack)” – packages associated with papers shared under CC-BY.\nProduce a single repro-pack for an entire paper\n\ncontaining:\n\nCode, results, input data (if small enough)\nFigures (vector format)\nConfig file, etc\n\nUpload to FigShare/Zenodo under CC-BY license.\nCite using the resulting DOI in the associated papers.\n\nBenefits\n\nImprove reproducibility & impact of your work.\nReviewers love it.\nLets you reuse your figures without violating a journal copyright.\n\nWhen published, the journal (one that isn’t open access) owns the paper & everything in it that isn’t licensed from somewhere else.\n\n\nCan include an appendix with statement about the availability of material. Or put it in the methods section.\nResearch compendium: make your paper like a package so it’s easily-installable. Uses lightweight packaging structure.\n\nrOpenSci (Karthik Ram)\n\nrOpenSci: Scientific software for R. Helping researchers write sustainable software tools.\nsoftware-review: rOpenSci Software Peer Review of community-contributed packages\nJOSS got started when rOpenSci realized the need extends beyond R packages.\nrOpenSci’s dev-guide\nPyOpenSci recently got started as the Python version of ROpenSci. (David Nicholson)\n\nJOSS: Journal of Open Source Software (Kyle Niemeyer)\n\nOpen, no fees.\nIf you’ve already licensed your code & have good documentation, it should take under an hour to submit to JOSS.\nVery short paper to describe the software.\nAll the conversation happens on GitHub. Uses same structure as JOSE (Journal of Open Source Education).\nQuestions from the audience: when to submit as a package (e.g. to JOSS) versus in a repro-pack (to your society journal)?\n\nIf anyone else would ever use it, it should probably be a package.\nIf the code is only used for creating a paper, it should just be in the repro-pack.\nIf your goal is to write a methods paper, it probably wouldn’t go to JOSS.\nIf you have the option to submit to a domain journal, do that first instead of JOSS. (Karthik’s take)\n\nJOSS is meant to fill in the gap for people who don’t have a place to publish their software.\n\n\nThis is for getting research credit. But you still need to cite the specific version you used (e.g. from Zotero) for reproducibility purposes.\n\nSidney Bell at the Chan Zuckerberg Initiative.\n\nCZI started funding scientific software.\n\nfoundational packages (e.g. scikit-learn, matplotlib, pandas).\nbiology domain-specific packages.\n\nFirst cycle of funding awarded. Second round closes in Feb.\nFunding awarded to organizations (e.g. NumFocus, Universities), not people.\n\n\n\n\nDocumentation (Kyle Niemeyer)\n\nValue of documentation.\n\nThe value & extent of your work if it’s understandable by your colleagues.\nProvides provenance for your scientific process.\nDemonstrates your skill & professionalism.\n“A love-letter that you write to your future self.”\n\nIt’s easier than you think!\nTypes:\n\nUser & developer guides\n\nREADME file accompanied by LICENSE, CITATION, CHANGELOG, etc.\n\nCode comments\n\ndocstring\n\nWrite them for functions & classes.\nAvailable within Python via help() & easy to parse by Sphinx.\n\nin-line\n\nBad: polluting the code with unnecessary information that’s already evident from reading the code.\nGood: use sparingly to explain reasons behind choices & complicated sections.\n\n\nSelf-documenting code\n\nIntelligently name things that tells you why it exists, what it does, and how it’s used.\nWrite really simple functions that do only one thing.\n\n“A function should have a function, not multiple functions.”\n\nFollow consistent style.\n\nGenerated API documentation\n\nTools\n\nSphinx: automatically generate documentation\n\nSet it up with CI to automatically build your documentation website when you make changes.\nWriting docstrings that are compatible with Sphinx:\n\nStyles: NumPy, Google, reStructuredText… (note: PyCharm can insert doc scaffolds automatically).\nSpecify parameters, returns, & include a short description.\n\nEasy to get started quickly. See slides for more details. # at top-level of repo, same level as package dir       mkdir docs/       cd docs/       sphinx-quickstart       make html\n\ndoctr: auto-deploy docs to GitHub pages using TravisCI.\nRead the Docs to host your documentation.\n\nSimple example: Kyle’s MechE course\nMore complex example: astropy"
  },
  {
    "objectID": "posts/2024-12-16-name-change/index.html",
    "href": "posts/2024-12-16-name-change/index.html",
    "title": "Name change",
    "section": "",
    "text": "2024 was the best year of my life so far: I got married! 🎉\nWith marriage comes the question: what will you do with your last name? For a variety of reasons I’m taking the most complicated and inconvenient route possible:\n\nLegally, my surname is hyphenated: Sovacool-Caruthers\nFor all things work, professional, and academic-related, I am using my original surname: Sovacool\nIn social settings, I go by my spouse’s surname: Caruthers\n\nIf you’re checking out this website, chances are you’re in my professional network and you should carry on calling me Kelly Sovacool. I want to maintain continuity in my publication record and professional networks, so I am going to be fastidious about using Sovacool for work & academic settings.\nIf you know me primarily from outside work, you can call me Kelly Caruthers and refer to us both as The Caruthers. In social settings, I’m not too picky about it and will probably just roll with whatever you call me.\nUsing three variations of my last name is sure to generate endless opportunities for confusion, but I like the flexibility it affords. Will it be worth it? Dunno! I can be stubbornly perseverant and optimistic through silly things like self-inflicted paper work."
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html",
    "href": "posts/2020-03-20-learn-to-code/index.html",
    "title": "Teach yourself to Code",
    "section": "",
    "text": "This post was originally published on the DANG! blog\nAs most lab work at the University of Michigan comes to a temporary halt due to the ongoing COVID-19 pandemic, we’ve heard some of our fellow grad students and other researchers express an interest in learning how to code as they’re not able to conduct experimental work at this time. We thought we could help out by putting together this short guide on how to teach yourself to code.\nFirst above all, take care of yourself and your loved ones! We don’t want to contribute to the voices pressuring academics to be productive at a time when we should all be prioritizing our mental and physical health and that of our families. If you also have found the motivation and time to teach yourself how to code, then this guide is for you.\nWe wrote this guide with grad students, postdocs, and other scientists who have never written code before in mind, but most of the content applies to just about anyone wanting to learn."
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html#why-learn-to-code",
    "href": "posts/2020-03-20-learn-to-code/index.html#why-learn-to-code",
    "title": "Teach yourself to Code",
    "section": "Why learn to code?",
    "text": "Why learn to code?\n\nPerform exploratory data analysis.\nAnalyze & visualize your data.\nCreate automated reports.\nAutomate everything.\nMake your work reproducible.\nCreate publication-quality figures."
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html#what-language-to-learn",
    "href": "posts/2020-03-20-learn-to-code/index.html#what-language-to-learn",
    "title": "Teach yourself to Code",
    "section": "What language to learn?",
    "text": "What language to learn?\nIf there’s a single popular language that everyone else in your lab, department, or field uses, just start with that one. Why? You will want to be able to learn from others and ask for help when you need it. For scientific research, both R and Python are popular languages and great for getting started quickly with data analysis. R and Python are open source, meaning they are free as in libre and free as in free food at the department seminar! So you don’t need to buy a license to use them, you’ll have access after you leave the university, and anyone else with a computer will be able to run your code too.\nScientists in the DANG! community use R, Python, and/or other languages, but R seems to be the most common. If you’re not sure which one to pick and you’d like to get help from the DANG! community, try R. We also particularly like R for a package called R Markdown for turning code into analysis reports, manuscripts, and even presentations to easily & reproducibly share our work with others.\nThe logic of programming is the most important thing to learn, so deciding to pick up another language once you have experience in one should be easier. And it’s definitely not an “either/or” scenario; many experienced programmers use multiple languages regularly in their work. However, we recommend sticking to learning just one language at first so you don’t get overwhelmed."
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html#how-to-get-started",
    "href": "posts/2020-03-20-learn-to-code/index.html#how-to-get-started",
    "title": "Teach yourself to Code",
    "section": "How to get started?",
    "text": "How to get started?\n\nCode Academy is a good place to start for their free beginner R and Python lessons in an interactive format. Note that the free version of the Python lessons teach Python 2 (not Python 3). You should definitely use Python 3 if you’re going to use Python in your work, but there are very few differences in how you code Python 2 and 3, so learning Python 2 is still very valuable because almost everything translates to using Python 3.\nZena and her sister Maya created a guide to teaching yourself R. It takes you through the Code Academy lesson and also has extra exercises to practice data analysis.\nThe Carpentries is an organization that holds workshops to teach introductory programming skills to researchers. U-M has a Carpentries chapter that holds workshops regularly throughout the year (with the exception of during pandemics 😬). We highly recommend attending an in-person workshop if you get the opportunity, but you can access the lesson materials for R and Python online if you’d like to learn on your own. The Carpentries has also translated their R lesson to Spanish.\nAs part of Girls Who Code at U-M, Zena and Kelly have contributed to a curriculum teaching Python for Data Science aimed at high school students. You can find instructions for getting started here.\nRStudio has interactive tutorials where you can learn everything from the basics to writing reports to building interactive web apps.\n\nIf you’ve exhausted these options, here’s an overwhelmingly long list of links to even more resources and tools you might like to learn."
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html#how-to-use-it-in-the-real-world",
    "href": "posts/2020-03-20-learn-to-code/index.html#how-to-use-it-in-the-real-world",
    "title": "Teach yourself to Code",
    "section": "How to use it in the real world?",
    "text": "How to use it in the real world?\nIf you want to automate tasks, run your code on supercomputers, and make your friends think you’re a hacker, you should definitely learn the Unix Shell. You can find The Carpentries’ lesson on the Unix Shell here.\nThe Carpentries has instructions for installing the tools you’ll need:\n\nPython\nR\nUnix Shell"
  },
  {
    "objectID": "posts/2020-03-20-learn-to-code/index.html#how-to-get-help",
    "href": "posts/2020-03-20-learn-to-code/index.html#how-to-get-help",
    "title": "Teach yourself to Code",
    "section": "How to get help?",
    "text": "How to get help?\n\nGoogle is your best friend. No, really. We Google questions every day!\nAsk your friends, colleagues, etc. Especially when you’re just starting out, it can be difficult to know what to Google to get the answers you need. Ask a more advanced programmer as soon as you hit a wall.\nJoin the DANG! Slack workspace and use the #analysis_questions channel. DANG! exists because we think it’s important to have a community of practice so you can learn from other people, get personalized help when you need it, and help others.\n\n\nFurther reading:\n\nTen simple rules for biologists learning to program\nSuck until you don’t\n\n Written by Zena Lapp & Kelly Sovacool. Edited by Ari Kozik."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Licenses",
    "section": "",
    "text": "The original software included in this repository is made available under the OSI-approved MIT License.\nAll other original content is made available under the Creative Commons Attribution License.\n\n\nCopyright (c) 2022 Kelly Sovacool\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nAll other original non-software content is made available under the Creative Commons Attribution license. The following is a human-readable summary of (and not a substitute for) the full legal text of the CC BY 4.0 license.\nYou are free:\n\nto Share—copy and redistribute the material in any medium or format\nto Adapt—remix, transform, and build upon the material\n\nfor any purpose, even commercially.\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:\n\nAttribution—You must give appropriate credit by:\n\nmentioning that your work is derived from work that is Copyright © Kelly Sovacool.\nwhere practical, linking to https://sovacool.dev, provide a link to the license\nand indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\n\nNo additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. With the understanding that:\nNotices:\n\nYou do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
  },
  {
    "objectID": "LICENSE.html#mit-license",
    "href": "LICENSE.html#mit-license",
    "title": "Licenses",
    "section": "",
    "text": "Copyright (c) 2022 Kelly Sovacool\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "LICENSE.html#cc-by-license",
    "href": "LICENSE.html#cc-by-license",
    "title": "Licenses",
    "section": "",
    "text": "All other original non-software content is made available under the Creative Commons Attribution license. The following is a human-readable summary of (and not a substitute for) the full legal text of the CC BY 4.0 license.\nYou are free:\n\nto Share—copy and redistribute the material in any medium or format\nto Adapt—remix, transform, and build upon the material\n\nfor any purpose, even commercially.\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:\n\nAttribution—You must give appropriate credit by:\n\nmentioning that your work is derived from work that is Copyright © Kelly Sovacool.\nwhere practical, linking to https://sovacool.dev, provide a link to the license\nand indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\n\nNo additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. With the understanding that:\nNotices:\n\nYou do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material."
  },
  {
    "objectID": "posts/2021-08-26-r-sort-locale/index.html",
    "href": "posts/2021-08-26-r-sort-locale/index.html",
    "title": "Base R’s sort() order changes with locale",
    "section": "",
    "text": "Unit tests for a package I help maintain were passing when I ran them with devtools::test(), but failing when I ran them with devtools::check().\nEventually I found this blog post which linked to a StackOverflow post that had this same problem, and in their case it was caused by the base sort() function. It dawned on me that I recently started using sort() in the branch I was working on!\nWhen sorting character vectors, the sort order depends on the user’s locale, which is set by the environment variable LC_COLLATE. devtools::check() and devtools::test() were using different values for that environment variable, thus causing different output orders for some of the unit tests."
  },
  {
    "objectID": "posts/2021-08-26-r-sort-locale/index.html#sort-order-depends-on-locale",
    "href": "posts/2021-08-26-r-sort-locale/index.html#sort-order-depends-on-locale",
    "title": "Base R’s sort() order changes with locale",
    "section": "Sort order depends on locale",
    "text": "Sort order depends on locale\n\nchar_vect &lt;- c(letters, LETTERS)\n\nSys.setlocale(\"LC_COLLATE\", \"en_US.UTF-8\")\n\n[1] \"en_US.UTF-8\"\n\nsorted_eng &lt;- sort(char_vect)\nsorted_eng\n\n [1] \"a\" \"A\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"e\" \"E\" \"f\" \"F\" \"g\" \"G\" \"h\" \"H\" \"i\" \"I\" \"j\"\n[20] \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"o\" \"O\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\" \"s\" \"S\"\n[39] \"t\" \"T\" \"u\" \"U\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\"\n\nSys.setlocale(\"LC_COLLATE\", \"C\")\n\n[1] \"C\"\n\nsorted_c &lt;- sort(char_vect)\nsorted_c\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nall(sorted_eng == sorted_c)\n\n[1] FALSE"
  },
  {
    "objectID": "posts/2021-08-26-r-sort-locale/index.html#solutions",
    "href": "posts/2021-08-26-r-sort-locale/index.html#solutions",
    "title": "Base R’s sort() order changes with locale",
    "section": "Solutions",
    "text": "Solutions\n\n1. sort(method=\"radix\")\nUse base sort() with method = 'radix', the only method where the sort order does not depend on the locale. For more details, read the sort() docs by running ?sort in an R console.\n\nSys.setlocale(\"LC_COLLATE\", \"en_US.UTF-8\")\n\n[1] \"en_US.UTF-8\"\n\nsorted_eng_radix &lt;- sort(char_vect, method = 'radix')\nsorted_eng_radix\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nSys.setlocale(\"LC_COLLATE\", \"C\")\n\n[1] \"C\"\n\nsorted_c_radix &lt;- sort(char_vect, method = 'radix')\nsorted_c_radix\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nall(sorted_eng_radix == sorted_c_radix)\n\n[1] TRUE\n\n\n\n\n2. stringr::str_sort()\nUse str_sort() from the stringr package. It has a locale parameter that defaults to \"eng\", so the sort order will be stable by default, but you can override it if you need to.\n\nstringr::str_sort(char_vect)\n\n [1] \"a\" \"A\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"e\" \"E\" \"f\" \"F\" \"g\" \"G\" \"h\" \"H\" \"i\" \"I\" \"j\"\n[20] \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"o\" \"O\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\" \"s\" \"S\"\n[39] \"t\" \"T\" \"u\" \"U\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\"\n\nstringr::str_sort(char_vect, locale = 'haw')\n\n [1] \"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"f\" \"F\" \"g\"\n[20] \"G\" \"h\" \"H\" \"j\" \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\"\n[39] \"s\" \"S\" \"t\" \"T\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\""
  },
  {
    "objectID": "posts/2021-08-26-r-sort-locale/index.html#wrap-up",
    "href": "posts/2021-08-26-r-sort-locale/index.html#wrap-up",
    "title": "Base R’s sort() order changes with locale",
    "section": "Wrap-up",
    "text": "Wrap-up\nOur package doesn’t use any other functions from stringr, so I went with option 1 to avoid adding a new dependency. I wrote a helper function called radix_sort() that simply calls base sort() with radix, and a test case to make sure it actually produces a stable sort order when the default does not.\n\n\nIt's one of those debugging days… pic.twitter.com/PQQmJXOMit\n\n— Kelly Sovacool (@kelly_sovacool) August 25, 2021"
  },
  {
    "objectID": "posts/2022-11-22-just-enough-python/index.html",
    "href": "posts/2022-11-22-just-enough-python/index.html",
    "title": "Just enough Python for Snakemake",
    "section": "",
    "text": "TLDR: I made a tutorial: Just enough Python for R users to write advanced Snakemake workflows. The original intended audience is the Schloss Lab, but anyone with basic Snakemake experience may find it useful.\n1\nFor almost everyone in the Schloss Lab, R is their primary programming language. I can’t speak for Pat, but my understanding of the reason is:\nWhen I first joined the lab, Python was my main programming language. I had also taken some computer science classes in C++ and dabbled in R for statistics classes, but I didn’t know R well and hadn’t even heard of the tidyverse. Fortunately, picking up R & the tidyverse packages was a breeze thanks to Pat’s learning resources, other lab members leading code clubs that showcased their cool tips & tricks, and a vibrant #analysis-questions channel in the lab Slack workspace.\nSo I started using the tidyverse in R for all my data analysis code, but I kept on using Snakemake, a Python-based tool for writing reproducible workflows. Fortunately, Pat either didn’t mind, or didn’t mind enough to tell me to use Make instead (phew 😅).\nFast-forward several years: not only does everyone in the lab use Snakemake, Pat even made a video teaching intro to Snakemake!\nIt’s possible to write good, simple Snakemake workflows with very little knowledge of Python. However, once you begin to take your workflows to an intermediate or advanced level, learning some Python is very helpful. I would even say learning Python is required if you want to understand advanced Snakemake tricks.\nSo it was high time to make the code club I’ve been secretly dying to make since day 0: Just enough Python for R users to write advanced Snakemake workflows. We covered the content in two 1-hour lab meetings over the last couple weeks. The tutorial covers enough Python to grok these Snakemake concepts:\nAlthough the original intended audience is the Schloss Lab, anyone with basic Snakemake experience but limited Python knowledge may find this useful.\nIt was hard to stop myself from turning this code club into a brain-dump of everything I know and like about Python. There were a lot of topics I wished I had time to cover. I may eventually make a follow-up tutorial, “Just a little more Python”. Stay tuned!"
  },
  {
    "objectID": "posts/2022-11-22-just-enough-python/index.html#footnotes",
    "href": "posts/2022-11-22-just-enough-python/index.html#footnotes",
    "title": "Just enough Python for Snakemake",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe Python logo by the Python Software Foundation is licensed under GNU GPL v2. The Snakemake logo by Johannes Köster is licensed under CC BY-SA 4.0. The R logo by Hadley Wickham and others at RStudio is licensed under CC BY-SA 4.0.↩︎\nPat on “Why R?”: https://riffomonas.org/minimalR/01_introduction.html#why-r↩︎"
  },
  {
    "objectID": "qr-code.html",
    "href": "qr-code.html",
    "title": "QR Code",
    "section": "",
    "text": "https://sovacool.dev"
  },
  {
    "objectID": "pubs.html",
    "href": "pubs.html",
    "title": "Publications",
    "section": "",
    "text": "Last updated: August 20, 2025\n* Indicates co-first author.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nArticle\n\n\nAuthors\n\n\nbadges\n\n\n\n\n\n\n2023 Aug\n\n\nMachine Learning Classification by Fitting Amplicon Sequences to Existing OTUs. mSphere\n\n\nArmour CR, Sovacool KL, Close WL, Topçuoğlu BD, Wiens J, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2022 Jul\n\n\nIntestinal Inflammation Reversibly Alters the Microbiota to Drive Susceptibility to Clostridioides Difficile Colonization in a Mouse Model of Colitis. mBio\n\n\nBarron MR, Sovacool KL, Abernathy-Close L, Vendrov KC, Standke AK, Bergin IL, Schloss PD, Young VB\n\n\n  \n\n\n\n\n\n\n\n\n2022 Feb\n\n\nOptiFit: An Improved Method for Fitting Amplicon Sequences to Existing OTUs. mSphere\n\n\nSovacool KL, Westcott SL, Mumphrey MB, Dotson GA, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2022 Jan\n\n\nDeveloping and Deploying an Integrated Workshop Curriculum Teaching Computational Skills for Reproducible Research. JOSE\n\n\n*Lapp Z, *Sovacool KL, Lesniak N, King D, Barnier C, Flickinger M, Krüger J, Armour CR, Lapp MM, Tallant J, Diao R, Oneka M, Tomkovich S, Anderson JM, Lucas SK, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2021 Dec\n\n\nTeaching Python for Data Science: Collaborative Development of a Modular & Interactive Curriculum. JOSE\n\n\n*Duda M, *Sovacool KL, Farzaneh N, Nguyen VK, Haynes SE, Falk H, Furman KL, Walker LA, Diao R, Oneka M, Drotos AC, Woloshin A, Dotson GA, Kriebel A, Meng L, Thiede SN, Lapp Z, Wolford BN\n\n\n  \n\n\n\n\n\n\n\n\n2021 May\n\n\nMikropml: User-Friendly R Package for Supervised Machine Learning Pipelines. JOSS\n\n\n*Topçuoğlu BD, *Lapp Z, *Sovacool KL, Snitkin E, Wiens J, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2021 Apr\n\n\nGeography Is More Important than Life History in the Recent Diversification of the Tiger Salamander Complex. PNAS\n\n\nEverson KM, Gray LN, Jones AG, Lawrence NM, Foley ME, Sovacool KL, Kratovil JD, Hotaling S, Hime PM, Storfer A, Parra-Olea G, Percino-Daniel R, Aguilar-Miguel X, O’Neill EM, Zambrano L, Shaffer HB, Weisrock DW\n\n\n  \n\n\n\n\n\n\n\n\n2020 Aug\n\n\nTen Simple Rules to Increase Computational Skills among Biologists with Code Clubs. PLoS Comput Biol\n\n\nHagan AK, Lesniak NA, Balunas MJ, Bishop L, Close WL, Doherty MD, Elmore AG, Flynn KJ, Hannigan GD, Koumpouras CC, Jenior ML, Kozik AJ, McBride K, Rifkin SB, Stough J, Sovacool KL, Sze MA, Tomkovich S, Topcuoglu BD, Schloss PD\n\n\n  \n\n\n\n\n\n\n\n\n2016 Aug\n\n\nProcessing RNA-Seq Data of Plants Infected with Coffee Ringspot Virus. BMC Bioinform\n\n\nGoodin MM, Farman M, Inocencio H, Jang C, Jaromczyk JW, Moore N, Sovacool KL\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\nN = 9"
  },
  {
    "objectID": "cv/code-clubs.html",
    "href": "cv/code-clubs.html",
    "title": "Schloss Lab Code Clubs",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDate\n\n\n\n\n\n\nJust enough Python for R users to write advanced Snakemake workflows\n\n\nNov 14, 2022\n\n\n\n\nTips and tricks for making the most of GitHub\n\n\nMar 15, 2021\n\n\n\n\nHow to maintain R packages\n\n\nApr 19, 2021\n\n\n\n\nIntroduction to Testing R Code\n\n\nOct 16, 2020\n\n\n\n\nRe-creating plots to learn cool tricks and practice problem-solving\n\n\nJun 28, 2020\n\n\n\n\nA brief introduction to tidy evaluation\n\n\nMay 18, 2020\n\n\n\n\nException handling in R\n\n\nOct 28, 2019\n\n\n\n\nA Snakemake tutorial for make users\n\n\nJun 25, 2019\n\n\n\n\nDocumenting R code\n\n\nMay 21, 2019\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/girls-who-code.html",
    "href": "cv/girls-who-code.html",
    "title": "Girls Who Code at U-M DCMB",
    "section": "",
    "text": "Order By\n       Default\n         \n          dates\n        \n         \n          event\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\ndates\n\n\nevent\n\n\n\n\n\n\nSep 2021 - May 2022\n\n\nWeekly virtual Club\n\n\n\n\nJul 2021\n\n\nVirtual Data Science Summer Experience\n\n\n\n\nSep 2020 - May 2021\n\n\nWeekly virtual Club\n\n\n\n\nJul 2020\n\n\nVirtual Data Science Summer Experience\n\n\n\n\nSep 2019 - May 2020\n\n\nWeekly Club in Ann Arbor, MI\n\n\n\n\nJul 2019\n\n\nData Science Summer Experience in Detroit, MI\n\n\n\n\nJan - May 2019\n\n\nWeekly Club in Ann Arbor, MI\n\n\n\n\n\nNo matching items"
  }
]