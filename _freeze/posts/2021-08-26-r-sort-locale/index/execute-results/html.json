{
  "hash": "3cf80795cec52dee905fc2b20dd47930",
  "result": {
    "markdown": "---\ntitle: \"Base R's sort() order changes with locale\"\ndescription: |\n  And that can cause frustrating test failures in devtools::check()!\ndate: 2021-08-26\ncategories:\n  - Software Development\n  - R\n  - R Packages\npreview: commit_cleanup.png\n---\n\n\n\n\n\nUnit tests for [a package I help maintain](https://github.com/SchlossLab/mikropml) \nwere passing when I ran them with `devtools::test()`, but failing when I ran\nthem with `devtools::check()`.\n\n![](commit_exploding-head.png){width=60%}\n\nEventually I found [this blog post](https://irene.rbind.io/post/two-test-env/)\nwhich linked to \n[a StackOverflow post](https://stackoverflow.com/questions/42272119/r-cmd-check-fails-devtoolstest-works-fine) \nthat had this same problem, and in their case it was caused by the base `sort()` function.\nIt dawned on me that I recently started using `sort()` in \n[the branch I was working on](https://github.com/SchlossLab/mikropml/pull/276)!\n\nWhen sorting character vectors, the sort order depends on the user's locale,\nwhich is set by the environment variable `LC_COLLATE`.\n`devtools::check()` and `devtools::test()` were using different values for that\nenvironment variable, thus causing different output orders for some of the unit tests.\n\n## Sort order depends on locale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar_vect <- c(letters, LETTERS)\n\nSys.setlocale(\"LC_COLLATE\", \"en_US.UTF-8\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"en_US.UTF-8\"\n```\n:::\n\n```{.r .cell-code}\nsorted_eng <- sort(char_vect)\nsorted_eng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"A\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"e\" \"E\" \"f\" \"F\" \"g\" \"G\" \"h\" \"H\" \"i\" \"I\" \"j\"\n[20] \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"o\" \"O\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\" \"s\" \"S\"\n[39] \"t\" \"T\" \"u\" \"U\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\"\n```\n:::\n\n```{.r .cell-code}\nSys.setlocale(\"LC_COLLATE\", \"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C\"\n```\n:::\n\n```{.r .cell-code}\nsorted_c <- sort(char_vect)\nsorted_c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nall(sorted_eng == sorted_c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n## Solutions\n\n### 1. `sort(method=\"radix\")`\n\nUse base `sort()` with `method = 'radix'`, the only method where the sort \norder does not depend on the locale. \nFor more details, read the `sort()` docs by running `?sort` in an R console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setlocale(\"LC_COLLATE\", \"en_US.UTF-8\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"en_US.UTF-8\"\n```\n:::\n\n```{.r .cell-code}\nsorted_eng_radix <- sort(char_vect, method = 'radix')\nsorted_eng_radix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nSys.setlocale(\"LC_COLLATE\", \"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C\"\n```\n:::\n\n```{.r .cell-code}\nsorted_c_radix <- sort(char_vect, method = 'radix')\nsorted_c_radix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\"\n[39] \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nall(sorted_eng_radix == sorted_c_radix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n### 2. `stringr::str_sort()`\n\nUse `str_sort()` from [the `stringr` package](https://stringr.tidyverse.org/reference/str_order.html). \nIt has a `locale` parameter that defaults to `\"eng\"`, so the sort order will\nbe stable by default, but you can override it if you need to. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_sort(char_vect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"A\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"e\" \"E\" \"f\" \"F\" \"g\" \"G\" \"h\" \"H\" \"i\" \"I\" \"j\"\n[20] \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"o\" \"O\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\" \"s\" \"S\"\n[39] \"t\" \"T\" \"u\" \"U\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\"\n```\n:::\n\n```{.r .cell-code}\nstringr::str_sort(char_vect, locale = 'haw')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"u\" \"U\" \"b\" \"B\" \"c\" \"C\" \"d\" \"D\" \"f\" \"F\" \"g\"\n[20] \"G\" \"h\" \"H\" \"j\" \"J\" \"k\" \"K\" \"l\" \"L\" \"m\" \"M\" \"n\" \"N\" \"p\" \"P\" \"q\" \"Q\" \"r\" \"R\"\n[39] \"s\" \"S\" \"t\" \"T\" \"v\" \"V\" \"w\" \"W\" \"x\" \"X\" \"y\" \"Y\" \"z\" \"Z\"\n```\n:::\n:::\n\n\n## Wrap-up\n\nOur package doesn't use any other functions from `stringr`, so I went with\noption 1 to avoid adding a new dependency.\nI wrote a helper function called \n[`radix_sort()`](https://github.com/SchlossLab/mikropml/blob/04adac4588fae239fdaa8b2669c431f2268dc08f/R/utils.R#L195-L212) \nthat simply calls base `sort()` with radix, and \n[a test case](https://github.com/SchlossLab/mikropml/blob/04adac4588fae239fdaa8b2669c431f2268dc08f/tests/testthat/test-utils.R#L89-L99) \nto make sure it actually produces a stable sort order when the default does not.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">It&#39;s one of those debugging days... <a href=\"https://t.co/PQQmJXOMit\">pic.twitter.com/PQQmJXOMit</a></p>&mdash; Kelly Sovacool (@kelly_sovacool) <a href=\"https://twitter.com/kelly_sovacool/status/1430645976830709760?ref_src=twsrc%5Etfw\">August 25, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}